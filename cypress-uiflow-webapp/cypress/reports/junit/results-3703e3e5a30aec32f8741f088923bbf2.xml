<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="50.0660" tests="1" failures="1">
  <testsuite name="Root Suite" timestamp="2023-04-19T09:06:47" tests="0" file="cypress/e2e/UF-002-create-and-validate-connection.spec.ts" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="UF002: Create and validate a collection.Wed Apr 19 2023 14:36:47 GMT+0530 (India Standard Time)" timestamp="2023-04-19T09:06:47" tests="1" time="50.0410" failures="1">
    <testcase name="UF002: Create and validate a collection.Wed Apr 19 2023 14:36:47 GMT+0530 (India Standard Time) UF002: Create and validate a collection." time="0.0000" classname="UF002: Create and validate a collection.">
      <failure message="The following error originated from your test code, not from Cypress.

  &gt; Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  &gt; `cy.click()`

The cy command you invoked inside the promise was:

  &gt; `cy.log()`

Because Cypress commands are already promise-like, you don&apos;t need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command" type="CypressError"><![CDATA[CypressError: The following error originated from your test code, not from Cypress.

  > Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.

The command that returned the promise was:

  > `cy.click()`

The cy command you invoked inside the promise was:

  > `cy.log()`

Because Cypress commands are already promise-like, you don't need to wrap them or return your own promise.

Cypress will resolve your command with whatever the final Cypress command yields.

The reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.

When Cypress detects uncaught errors originating from your test code it will automatically fail the current test.

https://on.cypress.io/returning-promise-and-commands-in-another-command
    at cy.<computed> [as log] (https://www.uiflow-stage.com/__cypress/runner/cypress_runner.js:151085:72)
    at listener (https://www.uiflow-stage.com/__cypress/runner/cypress_runner.js:155036:19)
    at arrayMap (https://www.uiflow-stage.com/__cypress/runner/cypress_runner.js:25745:23)
    at map (https://www.uiflow-stage.com/__cypress/runner/cypress_runner.js:34714:14)
    at $Cypress.<anonymous> (https://www.uiflow-stage.com/__cypress/runner/cypress_runner.js:155038:14)
    at parent.<computed> [as emitMap] (https://www.uiflow-stage.com/__cypress/runner/cypress_runner.js:154997:31)
    at $Cypress.action (https://www.uiflow-stage.com/__cypress/runner/cypress_runner.js:147611:21)
    at $Cy.onUncaughtException (https://www.uiflow-stage.com/__cypress/runner/cypress_runner.js:151199:38)
    at <unknown> (https://www.uiflow-stage.com/__cypress/runner/cypress_runner.js:151375:28)
From Your Spec Code:
    at ConnectPage.clickOnSendBtn (webpack:///./cypress/support/PageObjects/ConectPage.ts:59:25)
    at Context.eval (webpack:///./cypress/e2e/UF-002-create-and-validate-connection.spec.ts:55:16)]]></failure>
    </testcase>
  </testsuite>
</testsuites>